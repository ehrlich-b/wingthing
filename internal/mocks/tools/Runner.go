// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	tools "github.com/behrlich/wingthing/internal/tools"
	mock "github.com/stretchr/testify/mock"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, tool, params
func (_m *Runner) Run(ctx context.Context, tool string, params map[string]interface{}) (*tools.Result, error) {
	ret := _m.Called(ctx, tool, params)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 *tools.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (*tools.Result, error)); ok {
		return rf(ctx, tool, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) *tools.Result); ok {
		r0 = rf(ctx, tool, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tools.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, tool, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedTools provides a mock function with no fields
func (_m *Runner) SupportedTools() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportedTools")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
