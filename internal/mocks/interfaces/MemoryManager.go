// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MemoryManager is an autogenerated mock type for the MemoryManager type
type MemoryManager struct {
	mock.Mock
}

// GetProjectMemory provides a mock function with given fields: key
func (_m *MemoryManager) GetProjectMemory(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMemory")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetUserMemory provides a mock function with given fields: key
func (_m *MemoryManager) GetUserMemory(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetUserMemory")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LoadProjectMemory provides a mock function with given fields: projectDir
func (_m *MemoryManager) LoadProjectMemory(projectDir string) error {
	ret := _m.Called(projectDir)

	if len(ret) == 0 {
		panic("no return value specified for LoadProjectMemory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(projectDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadUserMemory provides a mock function with given fields: configDir
func (_m *MemoryManager) LoadUserMemory(configDir string) error {
	ret := _m.Called(configDir)

	if len(ret) == 0 {
		panic("no return value specified for LoadUserMemory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(configDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveProjectMemory provides a mock function with given fields: projectDir
func (_m *MemoryManager) SaveProjectMemory(projectDir string) error {
	ret := _m.Called(projectDir)

	if len(ret) == 0 {
		panic("no return value specified for SaveProjectMemory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(projectDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUserMemory provides a mock function with given fields: configDir
func (_m *MemoryManager) SaveUserMemory(configDir string) error {
	ret := _m.Called(configDir)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserMemory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(configDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProjectMemory provides a mock function with given fields: key, value
func (_m *MemoryManager) UpdateProjectMemory(key string, value string) {
	_m.Called(key, value)
}

// UpdateUserMemory provides a mock function with given fields: key, value
func (_m *MemoryManager) UpdateUserMemory(key string, value string) {
	_m.Called(key, value)
}

// NewMemoryManager creates a new instance of MemoryManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemoryManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemoryManager {
	mock := &MemoryManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
