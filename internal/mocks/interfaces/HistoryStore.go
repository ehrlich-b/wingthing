// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/behrlich/wingthing/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// HistoryStore is an autogenerated mock type for the HistoryStore type
type HistoryStore struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: sessionID
func (_m *HistoryStore) DeleteSession(sessionID string) error {
	ret := _m.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSessions provides a mock function with no fields
func (_m *HistoryStore) ListSessions() ([]interfaces.Session, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 []interfaces.Session
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]interfaces.Session, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []interfaces.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Session)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadLastSession provides a mock function with no fields
func (_m *HistoryStore) LoadLastSession() (*interfaces.Session, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadLastSession")
	}

	var r0 *interfaces.Session
	var r1 error
	if rf, ok := ret.Get(0).(func() (*interfaces.Session, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *interfaces.Session); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.Session)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSession provides a mock function with given fields: sessionID
func (_m *HistoryStore) LoadSession(sessionID string) (*interfaces.Session, error) {
	ret := _m.Called(sessionID)

	if len(ret) == 0 {
		panic("no return value specified for LoadSession")
	}

	var r0 *interfaces.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*interfaces.Session, error)); ok {
		return rf(sessionID)
	}
	if rf, ok := ret.Get(0).(func(string) *interfaces.Session); ok {
		r0 = rf(sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSession provides a mock function with given fields: session
func (_m *HistoryStore) SaveSession(session *interfaces.Session) error {
	ret := _m.Called(session)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*interfaces.Session) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHistoryStore creates a new instance of HistoryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHistoryStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *HistoryStore {
	mock := &HistoryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
