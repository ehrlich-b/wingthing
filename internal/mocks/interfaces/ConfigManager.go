// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/behrlich/wingthing/internal/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// ConfigManager is an autogenerated mock type for the ConfigManager type
type ConfigManager struct {
	mock.Mock
}

// Get provides a mock function with no fields
func (_m *ConfigManager) Get() *interfaces.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *interfaces.Config
	if rf, ok := ret.Get(0).(func() *interfaces.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*interfaces.Config)
		}
	}

	return r0
}

// Load provides a mock function with given fields: userConfigDir, projectDir
func (_m *ConfigManager) Load(userConfigDir string, projectDir string) error {
	ret := _m.Called(userConfigDir, projectDir)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userConfigDir, projectDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveProjectConfig provides a mock function with given fields: projectDir
func (_m *ConfigManager) SaveProjectConfig(projectDir string) error {
	ret := _m.Called(projectDir)

	if len(ret) == 0 {
		panic("no return value specified for SaveProjectConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(projectDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUserConfig provides a mock function with given fields: userConfigDir
func (_m *ConfigManager) SaveUserConfig(userConfigDir string) error {
	ret := _m.Called(userConfigDir)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userConfigDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConfigManager creates a new instance of ConfigManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigManager {
	mock := &ConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
